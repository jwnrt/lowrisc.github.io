<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on lowRISC</title>
    <link>https://www.lowrisc.org/docs/</link>
    <description>Recent content in Documentation on lowRISC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Apr 2015 13:26:41 +0100</lastBuildDate>
    
	<atom:link href="https://www.lowrisc.org/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Frequently asked questions</title>
      <link>https://www.lowrisc.org/docs/current-release-faq/</link>
      <pubDate>Fri, 14 Sep 2018 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/current-release-faq/</guid>
      <description>Why are you releasing a separate binary installation guide ? The source code installation and build environment is 20GBytes for this release. The Vivado installation is 28GBytes. The quickstart binary distribution is 5GBytes, and hence is more suitable for older computers and/or users with limited internet bandwidth. Also there are a lot of technologies to understand to succeed with new development from source. We think users will want to see what can be achieved before going to the trouble of learning about everything.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://www.lowrisc.org/docs/getting-started/</link>
      <pubDate>Fri, 14 Sep 2018 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/getting-started/</guid>
      <description>Getting Started with the refresh-v0.6 prebuilt binaries This guide will walk you through downloading the binaries of the latest lowRISC release and booting it on a Nexys4DDR FPGA.
 You will require: A Linux PC with sudo access with two readily accessible USB ports (these instructions apply to Ubuntu 16.04.5 LTS) A Nexys4DDR FPGA board from Digilent with combined power and USB cable A micro-SD card (minimum 4GBytes capacity) A PC-compatible SD-card reader  Choosing a hardware configuration lowRISC can be configured standalone, mimicking a PC, or with a remote serial console (not to be confused with the tethered option mentioned in some RISCV documentation sources).</description>
    </item>
    
    <item>
      <title>Releases</title>
      <link>https://www.lowrisc.org/docs/lowrisc-releases/</link>
      <pubDate>Mon, 20 Aug 2018 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/lowrisc-releases/</guid>
      <description>lowRISC with run/step debugging via JTAG and GDB Release version 0.6, released October 2018 This release updates the Rocket IP to March 2018 and includes compressed instructions and JTAG debugging conforming to the RISCV Debug Specification with custom JTAG DTM (see JTAG internals for details). The root filing system is updated to use the mostly upstreamed Debian repository and the peripheral data path widths are increased to 64-bits for better performance.</description>
    </item>
    
    <item>
      <title>Overview of the Refresh system</title>
      <link>https://www.lowrisc.org/docs/overview/</link>
      <pubDate>Fri, 12 Jan 2018 13:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/overview/</guid>
      <description>Pre-defined Design constraints Our goal of supporting the same FPGA board as the previous release may only be realised with slight changes to the JTAG instruction register length and data register numbers. The only software tool impacted is openocd, and this has been patched for this release to allow the alternative numbers to be used if Xilinx is detected as the manufacturer ID due to FPGA design constraints.</description>
    </item>
    
    <item>
      <title>Boot remote instructions</title>
      <link>https://www.lowrisc.org/docs/boot-remote/</link>
      <pubDate>Thu, 11 Jan 2018 13:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/boot-remote/</guid>
      <description>Boot Linux remotely on FPGA You should have examples of remote booting in the Makefile known as etherlocal and etherremote.
Modify or duplicate these examples to reflect your local network topology, then
cd $TOP/fpga/board/nexys4_ddr  The remote downloader should be built (first time only)
make -C ../../common/script  This section assumes you followed the DHCP instructions earlier, in which case should have a message such as:
Hello LowRISC! Mon Aug 13 08:56:12 2018: Booting from Ethernet because SW2 is high .</description>
    </item>
    
    <item>
      <title>Build Berkeley boot loader</title>
      <link>https://www.lowrisc.org/docs/build-berkeley-boot-loader/</link>
      <pubDate>Thu, 11 Jan 2018 13:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/build-berkeley-boot-loader/</guid>
      <description>What is this for ? The RISCV specification defines (optionally) three main modes of operation: user, supervisor, and machine mode. Some documents also refer to a hypervisor mode, which may or may not be necessary. Some of the differences are:
 User mode: the mode which runs the users programs and the lowest privilege level.  No direct access to I/O or privileged instructions or kernel memory or other processes.</description>
    </item>
    
    <item>
      <title>Linux kernel build step</title>
      <link>https://www.lowrisc.org/docs/linux-kernel-build/</link>
      <pubDate>Thu, 11 Jan 2018 13:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/linux-kernel-build/</guid>
      <description>What&amp;rsquo;s this all about? Most of the support for RISCV specific development has taken place on very new versions of Linux. A fully generic kernel is hard to achieve given all the possible scenarios where RISCV could be used. Nevertheless certain helperss are assumed to be always available which simplify matters:
 The Kernel entry address is 0x80200000 Berkeley boot loader (BBL) handles the initial console output using it&amp;rsquo;s SBI interface A device tree blob (DTB) is passed to Linux to enable it to decide which devices to enable.</description>
    </item>
    
    <item>
      <title>Prepare the environment</title>
      <link>https://www.lowrisc.org/docs/prepare-the-environment/</link>
      <pubDate>Thu, 11 Jan 2018 13:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/prepare-the-environment/</guid>
      <description>lowRISC tools and source code are robust between versions of Linux, but it has been found that Vivado (the Xilinx FPGA implementation suite) is particular about the O/S
All builds were completed with Vivado 2018.1. This was the newest version at the time of writing. We have not tried every version but 2015.4 used on the previous releases does not work due to unidentified synthesis bugs in the virtual memory behaviour.</description>
    </item>
    
    <item>
      <title>lowRISC Refresh internals</title>
      <link>https://www.lowrisc.org/docs/jtag/</link>
      <pubDate>Thu, 11 Jan 2018 11:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/jtag/</guid>
      <description>This lowRISC release introduces refresh debugging and compressed instructions, allowing upstream debian Linux distribution to be used.
RTL changes The JTAG uses Xilinx built-in instruction register of 6 bits and available user data registers. These data register numbers deviate from the RISC-V specification but otherwise conforms to the Berkeley Rocket standard. This deviation eliminates the requirement for separate hardware to implement the debug interface and keeps costs low, allowing the same board (Nexys4DDR) as previously to be used.</description>
    </item>
    
    <item>
      <title>GSoC 2017 student report: Core lockstep for minion cores</title>
      <link>https://www.lowrisc.org/docs/gsoc-2017/core-lockstep/</link>
      <pubDate>Thu, 05 Oct 2017 19:30:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/gsoc-2017/core-lockstep/</guid>
      <description>Nikitas Chronas
Introduction The upgraded role of CubeSats, fueled by technological advances and lowered launch costs in the aerospace industry, has opened access to space for a wider audience. Space is a harsh environment for microelectronics - radiation induced Single Event Upsets can trigger bit flips in memory that could have catastrophic consequences, rendering a CubeSat useless. The two main options for fault tolerance are to either select from a limited range of expensive Rad-Hard electronics or to use Commercial Off-The-Shelf electronics that offer little protection.</description>
    </item>
    
    <item>
      <title>lowRISC project ideas for GSoC 2017</title>
      <link>https://www.lowrisc.org/docs/gsoc-2017-ideas/</link>
      <pubDate>Thu, 09 Feb 2017 15:12:36 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/gsoc-2017-ideas/</guid>
      <description>lowRISC is taking part in the 2017 Google Summer of Code as a mentoring organisation. See the full program timeline for a run-down of key dates. Student applications are due by 4pm UTC on April 3rd.
See the 2015 and 2016 ideas pages for more potential projects. If you want feedback on ideas, you&amp;rsquo;re best posting to the lowrisc-dev mailing list.
Project ideas (in no particular order) Your project here If you have a project idea relevant to lowRISC, don&amp;rsquo;t worry that it&amp;rsquo;s not listed here.</description>
    </item>
    
    <item>
      <title>End-to-end video decoding tutorial</title>
      <link>https://www.lowrisc.org/docs/internship-2016/video-tutorial/</link>
      <pubDate>Thu, 22 Sep 2016 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/internship-2016/video-tutorial/</guid>
      <description>Introduction The purpose of this tutorial is to give a simple list of steps to decode a single video on a Nexys4 DDR FPGA using lowRISC.
The extension describes how to use the accelerators.
Step 1: The Generic lowRISC setup Start by cloning our version of the lowRISC repository and running the typical set up commands:
git clone https://github.com/nbdd0121/lowrisc-chip.git cd lowrisc-chip git checkout vga ./setup_env.sh git submodule update --init --recursive.</description>
    </item>
    
    <item>
      <title>Extending lowRISC with new devices</title>
      <link>https://www.lowrisc.org/docs/internship-2016/device-tutorial/</link>
      <pubDate>Thu, 22 Sep 2016 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/internship-2016/device-tutorial/</guid>
      <description>In this tutorial, we will cover how to
 Add a device as an I/O slave Add a device as a DMA master  Add an I/O slave device The lowRISC chip uses NASTI-Lite (UC Berkeley implementation of AXI-Lite) as the interface for all I/O devices. The data width is 32-bits. Implement the standard AXI4-Lite interface for the new device, and follow these instructions to connect it to the chip:</description>
    </item>
    
    <item>
      <title>Extending the video accelerator to add custom stream processors</title>
      <link>https://www.lowrisc.org/docs/internship-2016/accelerator-tutorial/</link>
      <pubDate>Thu, 22 Sep 2016 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/internship-2016/accelerator-tutorial/</guid>
      <description>This tutorial will cover:
 Adding a new stream processor to the Video Accelerator infrastructure. Exposing the new instruction to the user.  Adding a new stream processor A stream processor has to be able to take a AXI4-Stream channel as input, process the data and output back to a AXI4-Stream channel as these are the only Input/Output options provided to it within the Video Accelerator infrastructure.
Let us assume that we wish to add</description>
    </item>
    
    <item>
      <title>Technical report from the lowRISC Summer Internship 2016</title>
      <link>https://www.lowrisc.org/docs/internship-2016/report/</link>
      <pubDate>Thu, 22 Sep 2016 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/internship-2016/report/</guid>
      <description>Friday, 2nd September, 2016
Xuan Guo, Nathanael Davison, Profir-Petru Partachi, Alistair Fisher
 MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; }, extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] } } });  Contents  Introduction License Overview of the Project Approaching the task
4.1 Codec Discussion
4.2 Specific Objectives
4.3 Previous Work
&amp;nbsp;&amp;nbsp;4.3.1 lowRISC
&amp;nbsp;&amp;nbsp;4.3.2 MPEG-2 Codec</description>
    </item>
    
    <item>
      <title>lowRISC project ideas for GSoC 2016</title>
      <link>https://www.lowrisc.org/docs/gsoc-2016-ideas/</link>
      <pubDate>Fri, 19 Feb 2016 13:12:36 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/gsoc-2016-ideas/</guid>
      <description>lowRISC is taking part in the 2016 Google Summer of Code as a mentoring organisation. We are working with a number of our friends in the open source hardware community, acting as an &amp;lsquo;umbrella&amp;rsquo; organisation to provide a wider range of projects. For an introduction to GSoC, see the GSoC FAQ. You can find our GSoC organisation page here. See the full program timeline for key dates. Student applications are open between March 14th and March 25th.</description>
    </item>
    
    <item>
      <title>Suggestions for using DPI with Verilator</title>
      <link>https://www.lowrisc.org/docs/other/dpi/</link>
      <pubDate>Fri, 15 Jan 2016 12:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/other/dpi/</guid>
      <description>By Wei Song (15-Jan-2016)
The SystemVerilog Dirtect Programming Interface (DPI) is an interface between SystemVerilog and a foreign programming language, especially C/C++. It allows a SystemVerilog process to call a function/task implmented in C through DPI and also allows SystemVerilog to expose its function/task for C programs to use.
Compared with all other methods such as PLI/VPI and SystemC, DPI is the most light-weighted and supported by almost all major simulators (VCS, NCSim, ModelSim, Xilinx ISim and Verilator) but not sure about Icarus Verilog.</description>
    </item>
    
    <item>
      <title>Compile and install RISC-V cross-compiler</title>
      <link>https://www.lowrisc.org/docs/riscv_compile/</link>
      <pubDate>Thu, 17 Dec 2015 17:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/riscv_compile/</guid>
      <description>Introduction of the RISC-V cross-compilation tools A number of cross-compilation tools are provided in the $TOP/riscv-tools directory:
 riscv-fesvr: The front-end server that serves system calls on the host machine. riscv-gnu-toolchain: The GNU GCC cross-compiler for RISC-V ISA. riscv-isa-sim: The RISC-V ISA simulator (Spike) riscv-pk: The proxy kernel that serves system calls on target machine.  There are four ways to test a program:
 Behavioural simulation: run the program in the RISC-V ISA simulator (Spike).</description>
    </item>
    
    <item>
      <title>Install Xilinx Vivado</title>
      <link>https://www.lowrisc.org/docs/xilinx/</link>
      <pubDate>Thu, 17 Dec 2015 17:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/xilinx/</guid>
      <description>Download and install Xilinx Vivado The Xilinx Vivado design suite can be downloaded from http://www.xilinx.com/support/download.html free of charge for registered users (registration is also free). For this release, we only recommend Vivado 2018.1. The version used in previous releases 2015.4 is known NOT to work on this release. During the installation process, when asked for &amp;ldquo;Select Edition to Install&amp;rdquo;, please choose &amp;ldquo;Vivado Design Edition&amp;rdquo;. When choosing which packages to install, please add &amp;ldquo;Software Development Kit&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Baremetal toolchain</title>
      <link>https://www.lowrisc.org/docs/build-bare-metal-toolchain/</link>
      <pubDate>Tue, 14 Apr 2015 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/build-bare-metal-toolchain/</guid>
      <description>Why is is this step needed ?  Because you haven&amp;rsquo;t used the quickstart procedure to install pre-built executables. Because you want to build everything from source or for a different O/S version. Because you don&amp;rsquo;t trust binaries.  What is it used for ?  The bare-metal boot loader and test programs require a newlib based flow. The Linux kernel and BBL requires a bare-metal flow. You might want to build custom software from source on the workstation.</description>
    </item>
    
    <item>
      <title>Booting a customised NFS system</title>
      <link>https://www.lowrisc.org/docs/boot-customised-nfs/</link>
      <pubDate>Tue, 14 Apr 2015 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/boot-customised-nfs/</guid>
      <description>It is possible to boot LowRISC in the absence of an SD-Card. This is useful if a large number of files are shared with a Host PC. However there are many variables to be considered which would be inconvenient to hardwire into the binary builds.
We will use the boot selection switches to choose a customised boot option. Prepare a file as follows:
 mount -t proc none /proc udhcpc -s /usr/share/udhcpc/default.</description>
    </item>
    
    <item>
      <title>DHCP configuration</title>
      <link>https://www.lowrisc.org/docs/dhcp-configuration/</link>
      <pubDate>Tue, 14 Apr 2015 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/dhcp-configuration/</guid>
      <description>Why DHCP ? A powerful but confusing feature for new users is the Ethernet interface available on the FPGA board. The good news is that the infrastructure designed to manage PCs can work equally well for FPGA boards. If you have a home hub or network address translation zone associated with your development environment it should be sufficient to simply plug the FPGA board into your 100BaseT hub and reset (having followed the previous advice to install the bitstream in quad-spi memory).</description>
    </item>
    
    <item>
      <title>Download and install Debian</title>
      <link>https://www.lowrisc.org/docs/download-install-debian/</link>
      <pubDate>Tue, 14 Apr 2015 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/download-install-debian/</guid>
      <description>Build Linux and early stage root filesystem These instructions assume you are running our recommended distribution Ubuntu 16.04.5 LTS
Debian installation requires the ability to emulate RISCV execution on the host PC.
Proceed as follows, first generate an initial root file system for booting, we use Debian to generate initial tmpfs for booting, and at the same time, the subsystems for multi-user operation:
cd $TOP/debian-riscv64  The bootstrapping process requires the qemu binary built in the previous step.</description>
    </item>
    
    <item>
      <title>Introduction to Development</title>
      <link>https://www.lowrisc.org/docs/introduction-to-development/</link>
      <pubDate>Tue, 14 Apr 2015 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/introduction-to-development/</guid>
      <description>Introduction to Development This project uses Field-programmable Gate Array (FPGA) manufacturered by Xilinx as the underlying technology. These devices are manufacturered in large volumes, hence are relatively inexpensive, but the overhead of programmability results in a large area increase and consequent high leakage current, as well as a considerably lower clock rate than mask programmed Application Specific Integrated Circuits (ASICs). Manufacturers try their best to products as usable as possible, but at the end of the day some of the error messages will not be very comprehensible to non-specialists.</description>
    </item>
    
    <item>
      <title>RISCV emulation</title>
      <link>https://www.lowrisc.org/docs/riscv-qemu-emulation/</link>
      <pubDate>Tue, 14 Apr 2015 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/riscv-qemu-emulation/</guid>
      <description>No pre-build installation images are available for our setup. So we accelerate the bootstrapping process using qemu. This first step builds qemu binary that provides user-space emulation (i.e. will execute RISC-V binaries, and intercept Linux syscalls to be handled by the host OS). This is in contrast to QEMU&amp;rsquo;s full system emulation mode, which provides emulation devices and requires you to boot a native operating system.
cd $TOP/qemu ./configure --static --disable-system --target-list=riscv64-linux-user make  Next recommended step below:</description>
    </item>
    
    <item>
      <title>Updating the kernel of a running system</title>
      <link>https://www.lowrisc.org/docs/update-running-kernel/</link>
      <pubDate>Tue, 14 Apr 2015 13:26:41 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/update-running-kernel/</guid>
      <description>As an install step, the Linux kernel (with BBL) can always be written on the host card reader. However, for regular use, it is inconvenient to keep swapping the card between devices. If you already have a running Linux system, perhaps based on the pre-made executables, it is possible to replace the kernel in the running system, which saves wear and tear from regularly swapping cards between target system and PC.</description>
    </item>
    
    <item>
      <title>Tagged memory and minion cores in the lowRISC SoC</title>
      <link>https://www.lowrisc.org/docs/memo-2014-001-tagged-memory-and-minion-cores/</link>
      <pubDate>Mon, 23 Mar 2015 13:25:48 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/memo-2014-001-tagged-memory-and-minion-cores/</guid>
      <description>Download PDF
This document describes our current thinking on two aspects of the lowRISC SoC, namely tagged memory and &amp;lsquo;minion&amp;rsquo; cores usable for I/O and other tasks. We are sharing it at this early stage in the spirit of &amp;ldquo;release early, release often&amp;rdquo; and to benefit from input and ideas from the wider community.
Please post any comments or questions either in the discussion thread below, or on our mailing list.</description>
    </item>
    
    <item>
      <title>lowRISC project ideas for GSoC 2015</title>
      <link>https://www.lowrisc.org/docs/gsoc-2015-ideas/</link>
      <pubDate>Mon, 23 Mar 2015 13:12:36 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/gsoc-2015-ideas/</guid>
      <description>lowRISC is taking part in the 2015 Google Summer of Code as a mentoring organisation. We are working with a number of our friends in the open source hardware community, acting as an &amp;lsquo;umbrella&amp;rsquo; organisation to provide a wider range of projects. For an introduction to GSoC, see the GSoC FAQ.
Students will be able to start applying on the 16th of March. The GSoC Student Guide is a great resource on what is involved in being a GSoC student.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.lowrisc.org/docs/configuring-build-root/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/configuring-build-root/</guid>
      <description>cd $TOP git clone -b refresh-v0.6 https://github.com/lowRISC/buildroot.git cd buildroot cp configs/lowrisc_defconfig .config make</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.lowrisc.org/docs/docker-tools-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/docker-tools-build/</guid>
      <description>docker pull jrrk2/riscv-tools-build
docker run -v /var/tmp:/var/tmp -it jrrk2/riscv-tools-build bash /root/build_riscv.sh</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.lowrisc.org/docs/download-the-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/download-the-code/</guid>
      <description>Structure of the git repository The structure of the repository is as follows:
 fpga: FPGA demo implementations  board: Demo projects for individual development boards.  nexys4: Files for the Nexys™4 DDR Artix-7 FPGA Board.   debian-riscv64: Scripts to bootstrap a Debian Linux RISCV system riscv-linux: The Linux RISCV kernel with LowRISC device drivers rocket-chip: The Rocket core and its sub-systems.  firrtl: Hardware description intermediate language hardfloat: Hardware floating-point arithmetic unit torture: Tricky tests that stress the CPU riscv-tools: The cross-compilation and simulation tool chain.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.lowrisc.org/docs/generate-the-bitstream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.lowrisc.org/docs/generate-the-bitstream/</guid>
      <description>Generate the bitstream FPGA demo with Fpga (default bootloader) cd $TOP/fpga/board/nexys4_ddr make cleanall make bitstream  The generated bitstream is located at lowrisc-chip-imp/lowrisc-chip-imp.runs/impl_1/chip_top.bit. This will take some time (20-60 minutes depending on your computer).
Program the bootloader on FPGA Next, turn on the FPGA board and connect the USB cable. Now you download the bitstream to the quad-SPI on the FPGA board:
make cfgmem make program-cfgmem  At this point, you should check that the FPGA board switches are initially all off (except SW2), and the MODE jumper is in QSPI mode and then press the PROG button.</description>
    </item>
    
  </channel>
</rss>