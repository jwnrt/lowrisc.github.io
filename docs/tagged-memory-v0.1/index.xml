<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lowRISC tagged memory tutorial on lowRISC</title>
    <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/</link>
    <description>Recent content in lowRISC tagged memory tutorial on lowRISC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Apr 2015 14:18:41 +0100</lastBuildDate>
    
	<atom:link href="https://www.lowrisc.org/docs/tagged-memory-v0.1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Future work</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/future/</link>
      <pubDate>Mon, 13 Apr 2015 14:27:08 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/future/</guid>
      <description>This is the first release of the lowRISC chip. It provides simple, but fully functional, support for tagged memory. In the following releases, we will provide tag support in the Spike simulator and add support for the L2 cache. We will also explore better ISA and core support for tags. Current work is also developing an untethered version of the SoC with the necessary peripherals.</description>
    </item>
    
    <item>
      <title>Building the front-end server</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga-fesvr/</link>
      <pubDate>Sun, 12 Apr 2015 16:24:16 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga-fesvr/</guid>
      <description>The front-end server runs on the ARM side (PS) of the Zynq. It must be cross-compiled against the Xilinx SDK.
To compile your own front-end server:
# set up the RISCV environment variables # set up the Xilinx environment variables cd $TOP/riscv-tools/riscv-fesvr mkdir build_fpga cd build_fpga ../configure --host=arm-xilinx-linux-gnueabi make -j$(nproc)  Once compilation has completed, you should find the following files:
ls -l fesvr-zedboard ls -l libfesvr.so  To copy your new front-end server to the FPGA image:</description>
    </item>
    
    <item>
      <title>Modifying the contents of the RAMdisk</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga-ramdisk/</link>
      <pubDate>Sun, 12 Apr 2015 16:22:20 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga-ramdisk/</guid>
      <description>The contents of the RAMDisk for the ARM Linux (uramdisk.image.gz) can be extracted to a local directory for you to modify:
make ramdisk-open  The RAMDisk is extracted to ramdisk/ in fpga-zynq/zedboard. Note that the default user in the ARM Linux is root, so use sudo when revising the files.
You can repack the RAMDisk using:
make ramdisk-close  The extracted RAMDisk remains at ramdisk/. It can be removed with:</description>
    </item>
    
    <item>
      <title>Building the boot image from scratch</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga-bootimage/</link>
      <pubDate>Sun, 12 Apr 2015 16:19:10 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga-bootimage/</guid>
      <description>The build image script You can rebuild most of the boot image from scratch using the build_image.sh script:
# setup the RISCV environment variables # setup the Xilinx environment variables cd $TOP/fpga-zynq/zedboard ./build_image.sh  The individual steps needed to complete this process are described in more detail below. Similar instructions are provided for the original Rocket chip here.
Requirements  Xilinx Vivado 2014.4 Ensure Xilinx patch 63036 is installed otherwise the First Stage Boot Loader (FSBL) cannot be generated.</description>
    </item>
    
    <item>
      <title>Running tests on the Zedboard FPGA</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga/</link>
      <pubDate>Sun, 12 Apr 2015 15:52:33 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/fpga/</guid>
      <description>Introduction The Berkeley Rocket Chip can be run on various Zynq FPGA boards. Details of how to do this can be found here. For convenience, we step through a very similar process and describe how to run simple tagged memory tests.
The ZedBoard is a low-cost (~$300-$400) development board built around the Xilinx Zynq-7000. The Zynq-7000 architecture consists of a dual-core ARM Cortex-A9 based &amp;ldquo;processing system&amp;rdquo; (PS) and programmable logic (PL), i.</description>
    </item>
    
    <item>
      <title>Simulating the Verilog (FPGA target) generated by Chisel</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/verilog-fpga-sim/</link>
      <pubDate>Sun, 12 Apr 2015 15:51:05 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/verilog-fpga-sim/</guid>
      <description>Chisel can generate Verilog for an FPGA target. This Verilog RTL can also be simulated with the Synopsys VCS tool (other Verilog simulators are not supported at present).
To generate the VCS simulator binary:
# requirements: riscv-gnu-toolchain, riscv-fesvr # set up the RISCV environment variables # set up the VCS environment variables cd $TOP/fsim make  This will generate a simulator called simv-DefaultFPGAConfig assuming the Default configuration is used. As was the case for the Chisel emulator, for simulating a different lowRISC configuration, TAGW32S2T4FPGA for example, you can either change the CONFIG variable in the Makefile or temporarily run make as:</description>
    </item>
    
    <item>
      <title>Simulating the Verilog (ASIC target) generated by Chisel</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/verilog-asic-sim/</link>
      <pubDate>Sun, 12 Apr 2015 15:47:34 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/verilog-asic-sim/</guid>
      <description>Here we describe how to simulate the Verilog RTL generated by Chisel using the Synopsys VCS tool. We do not currently support alternatives to VCS.
To compile the RTL simulator:
# requirements: riscv-gnu-toolchain, riscv-fesvr # set up the RISCV environment variables # set up the VCS environment variables cd $TOP/vsim make  This will generate the executable simulator as simv-DefaultVLSIConfig assuming the Default configuration is used. As was the case for the Chisel emulator, for simulating a different lowRISC configuration, TAGW32S2T4 for example, you can either change the CONFIG variable in the Makefile or temporarily run make as:</description>
    </item>
    
    <item>
      <title>Using the C&#43;&#43; emulator generated by Chisel</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/emulator/</link>
      <pubDate>Sun, 12 Apr 2015 15:44:04 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/emulator/</guid>
      <description>The Rocket core is written in Chisel. The Chisel compiler is able to generate cycle-accurate C++ simulation models. It is also possible to generate VCD waveform from these to aid debugging.
To compile the Rocket core into a C++ simulation model:
# requirement: riscv-gnu-toolchain, riscv-fesvr # set up the RISCV environment variables cd $TOP/emulator make  This will generate the executable simulator as emulator-DefaultCPPConfig assuming the Default configuration is used.</description>
    </item>
    
    <item>
      <title>Running simulations using Spike</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/spike/</link>
      <pubDate>Sun, 12 Apr 2015 15:42:11 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/spike/</guid>
      <description>Spike is a RISC-V functional ISA simulator. It models a RISC-V core and cache system. Note that our fork hasn&amp;rsquo;t currently been modified to include tagged memory support.
An example hello world program is provided in riscv-tools/hello/:
# set up the RISCV environment variables cd $TOP/riscv-tools/hello make  This will generate three executables to run with and without the support of the proxy kernel and with the support of a full Linux OS:</description>
    </item>
    
    <item>
      <title>Running simulations</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/simulations/</link>
      <pubDate>Sun, 12 Apr 2015 15:39:40 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/simulations/</guid>
      <description>Programs can be run by first booting RISC-V Linux on the simulator or FPGA. Alternatively, they can be run without full OS support either in a pure bare metal mode or with the support of the newlib library (a C standard library implementation) and a simple proxy kernel.
Bare metal mode Programs running in this mode have no library support. The host target interface (HTIF) must be accessed directly by the program if necessary, e.</description>
    </item>
    
    <item>
      <title>A guide to setting up the development environment</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/setup/</link>
      <pubDate>Sun, 12 Apr 2015 15:35:46 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/setup/</guid>
      <description>File structure of the repository Our tagged memory tutorial builds upon a forked version of the original Rocket chip repository. Its contents are described here and summarised below for convenience:
 chisel: The Chisel compiler used for compiling the rocket system. rocket: The source code for the Rocket core. uncore: The source code for the memory subsystem. hardfloat: The IEEE 754-2008 compliant floating-point unit. dramsim2: The simulation model for the DRAM memory system.</description>
    </item>
    
    <item>
      <title>Tagged memory tests</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/tag-tests/</link>
      <pubDate>Sun, 12 Apr 2015 15:33:14 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/tag-tests/</guid>
      <description>The original Rocket chip repository provides a thorough test suite for the RISC-V ISA (riscv-tools/riscv-tests/isa). All tests are written in assembly.
A new test case is provided in riscv-tools/riscv-tests/isa/rv64si/ltag.S
More complicated tests can be found in riscv-tools/lowrisc-tag-tests/tests:
 tag_ld_st.cc - Verifies a long sequence of random tag writes parity.cc - Random data is allocated on the heap. All the tag bits are then set by generating a number of different parity bits.</description>
    </item>
    
    <item>
      <title>Adding HW/SW support for the load and store tag instructions</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/new-instructions/</link>
      <pubDate>Sun, 12 Apr 2015 15:28:01 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/new-instructions/</guid>
      <description>Modifying the Rocket core The Rocket core is described using the Chisel hardware construction language.
The structure of the key source files is shown below:
 src/src/main/scala  LowRISCChip.scala - Top-level connections Network.scala - The network interconnecting the tiles and coherence managers PublicConfigs.scala - The configuration parameters  rocket/src/main/scala  tile.scala - Top-level for a Rocket tile core.scala - Top-level for the Rocket core btb.scala - Branch target buffer csr.</description>
    </item>
    
    <item>
      <title>Tagged memory support</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/tags/</link>
      <pubDate>Sun, 12 Apr 2015 15:16:58 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/tags/</guid>
      <description>Tagged memory support Tagged memory associates metadata with each memory location and can be used to implement fine-grained memory access restrictions. Attacks which hijack control flow can be prevented by using this protection to restrict writes to memory locations containing return addresses, function pointers, and vtable pointers [1].
The implementation of tagged memory presented here provides only basic support by extending on-chip caches to hold tags and by adding a tag cache.</description>
    </item>
    
    <item>
      <title>Rocket core overview</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/rocket-core/</link>
      <pubDate>Sun, 12 Apr 2015 15:12:50 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/rocket-core/</guid>
      <description>The Rocket core is an in-order scalar processor that provides a 5-stage pipeline. It implements the RV64G variant of the RISC-V ISA. The Rocket core has one integer ALU and an optional FPU. An accelerator or co-processor interface, called RoCC, is also provided.
Further details of the RISC-V Rocket core pipeline can be found here. See p.13 of this document for a detailed diagram of Rocket&amp;rsquo;s microarchitecture. The Rocket core is sometimes described as a 6-stage pipeline with the addition of a &amp;lsquo;pcgen&amp;rsquo; stage.</description>
    </item>
    
    <item>
      <title>Rocket chip overview</title>
      <link>https://www.lowrisc.org/docs/tagged-memory-v0.1/rocket-chip/</link>
      <pubDate>Sun, 12 Apr 2015 15:05:25 +0100</pubDate>
      
      <guid>https://www.lowrisc.org/docs/tagged-memory-v0.1/rocket-chip/</guid>
      <description>An overview of Berkeley&amp;rsquo;s RISC-V &amp;ldquo;Rocket Chip&amp;rdquo; SoC Generator can be found here.
A high-level view of the rocket chip is shown below. The design contains multiple Rocket tiles consisting of a Rocket core and L1 instruction and data caches. Our tagged memory implementation inserts a tag cache before the main memory interface. Our tagged memory additions are described in detail here.
The host-target interface (HTIF) provides a FIFO interface between the ARM PS and RISC-V systems.</description>
    </item>
    
  </channel>
</rss>